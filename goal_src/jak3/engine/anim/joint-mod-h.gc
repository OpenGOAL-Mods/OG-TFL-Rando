;;-*-Lisp-*-
(in-package goal)

;; name: joint-mod-h.gc
;; name in dgo: joint-mod-h
;; dgos: GAME

(defenum joint-mod-mode
  :bitfield #t
  :type uint32
  (flex-blend)
  (look-at)
  (world-look-at)
  (rotate)
  (joint-set)
  (joint-set*)
  (rotate2) ;; ??
  (reset)
  (polar-look-at)
  (joint-set*-world)
  (gun-look-at)
  (foot-rot)
  (joint-set-world)
  )

;; +++joint-mod-h:track-mode
(defenum track-mode
  :bitfield #t
  :type uint16
  (track-on       0) ;; 1
  (track-x        1) ;; 2
  (track-y        2) ;; 4
  (lock-on        3) ;; 8
  (no-trans       4) ;; 16
  (no-rotate      5) ;; 32
  (no-scale       6) ;; 64
  )
;; ---joint-mod-h:track-mode


(defenum joint-mod-base-flags
  :bitfield #t
  :type uint16
  (attached 0)
  )

(defenum joint-mod-ik-flags
  :bitfield #t
  :type uint32
  (enable)
  (elbow-trans-neg)
  (elbow-rot-neg)
  )

;; DECOMP BEGINS

(deftype joint-mod (basic)
  "Utility to modify a joint transform from code, rather than just getting it from animation.
This is used to make jak look toward an enemy, for example."
  ((mode             joint-mod-mode)
   (process          process-drawable)
   (joint            cspace)
   (target           vector      :inline)
   (twist            vector      :inline)
   (twist-max        vector      :inline)
   (extra-twist      degrees     :overlay-at (-> twist data 2))
   (track-mode       track-mode  :overlay-at (-> twist data 3))
   (look-at-count    uint16      :offset  46)
   (twist-range-x    meters      :overlay-at (-> twist-max data 2))
   (twist-range-y    meters      :overlay-at (-> twist-max data 3))
   (twist-speed-x    float)
   (twist-speed-y    float)
   (trans            vector      :inline)
   (smushy-old       float       :overlay-at (-> trans data 0))
   (smushy-off       float       :overlay-at (-> trans data 1))
   (smushyv          float       :overlay-at (-> trans data 2))
   (quat             quaternion  :inline)
   (scale            vector      :inline)
   (notice-time      time-frame)
   (flex-blend       float)
   (blend            float)
   (old-blend        float)
   (max-dist         meters)
   (ignore-angle     degrees)
   (up               uint8)
   (nose             uint8)
   (ear              uint8)
   (base-joint       uint8)
   (base-nose        uint8)
   (shutting-down?   symbol)
   (parented-scale?  symbol)
   )
  (:methods
    (new (symbol type) _type_)
    (joint-mod-method-9 () none)
    (joint-mod-method-10 () none)
    (joint-mod-method-11 () none)
    (reset-blend! (_type_) _type_)
    (joint-mod-method-13 () none)
    (joint-mod-method-14 () none)
    (joint-mod-method-15 () none)
    )
  )


(deftype try-to-look-at-info (basic)
  ((who   handle)
   (horz  float)
   (vert  float)
   )
  )

(deftype joint-mod-base (structure)
  "Base type for most joint-mods"
  ((flags       joint-mod-base-flags)
   (node-index  int16)
   (proc        (pointer process-drawable))
   (callback    (function cspace transformq none))
   )
  (:methods
    (init (_type_ process-drawable uint joint-mod-base-flags) none)
    (attach-callback (_type_) none)
    (remove-callback (_type_) none)
    )
  )


(defmethod attach-callback ((this joint-mod-base))
  "Take control of the specified joint by modifying the cspace callback."
  (let ((a1-3 (-> this proc 0 node-list data (-> this node-index))))
    (set! (-> a1-3 param0) (-> this callback))
    (set! (-> a1-3 param1) (the-as basic this))
    )
  (logior! (-> this flags) (joint-mod-base-flags attached))
  0
  (none)
  )

(defmethod remove-callback ((this joint-mod-base))
  "Remove this callback and set param0 to #f to use the default (animated joint)"
  (set! (-> this proc 0 node-list data (-> this node-index) param0) #f)
  (logclear! (-> this flags) (joint-mod-base-flags attached))
  0
  (none)
  )

(defmethod init ((this joint-mod-base) (arg0 process-drawable) (arg1 uint) (arg2 joint-mod-base-flags))
  "Set up this joint-mod to modify the given joint of the given process. Will attach automatically if attached flag is set."
  (set! (-> this flags) arg2)
  (set! (-> this node-index) (the-as int arg1))
  (set! (-> this proc) (the-as (pointer process-drawable) (process->ppointer arg0)))
  (if (logtest? arg2 (joint-mod-base-flags attached))
      (attach-callback this)
      )
  0
  (none)
  )

(deftype joint-mod-ik (basic)
  ((flags                   joint-mod-ik-flags)
   (process                 process-drawable)
   (hand-dist               float)
   (handle-pos              vector  :inline)
   (elbow-pole-vector-axis  uint32)
   (elbow-rotation-axis     uint32)
   (user-position           vector  :inline)
   (user-normal             vector  :inline)
   (user-blend              float)
   (user-float              float)
   (callback                (function joint-mod-ik matrix matrix vector object))
   (shoulder-matrix-no-ik   matrix  :inline)
   (elbow-matrix-no-ik      matrix  :inline)
   (blend                   float)
   (blend-interp            float)
   )
  (:methods
    (new (symbol type) _type_)
    (joint-mod-ik-method-9 () none)
    (joint-mod-ik-method-10 () none)
    )
  )
