;;-*-Lisp-*-
(in-package goal)
(deftype rolling-rock-master (process)
  ((path-count       int32)
   (path-array       curve-control 8)
   (scale-min        float)
   (scale-max        float)
   (freq-min         float)
   (freq-max         float)
   (speed-min        float)
   (speed-max        float)
   (last-path-picked int32))
  (:methods
   (rolling-rock-master-initialize-paths (_type_) object))
  (:states
   rolling-rock-master-idle))

(defskelgroup *rolling-rock-sg*
  rolling-rock
  rolling-rock-lod0-jg
  rolling-rock-idle-ja
  ((rolling-rock-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 5 0 15))

(define *rolling-rock-exploder-params*
  (new 'static
       'joint-exploder-static-params
       :joints
       (new 'static
            'boxed-array
            :type
            joint-exploder-static-joint-params
            (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 19 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 20 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 21 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 22 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 23 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 24 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 25 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 26 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 27 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 28 :parent-joint-index -1)
            (new 'static 'joint-exploder-static-joint-params :joint-index 29 :parent-joint-index -1))))

(deftype rolling-rock (process-drawable)
  ((root        collide-shape-moving :override)
   (path-speed  float)
   (path-length float)
   (path-pos    float))
  (:methods
   (init-collision! (_type_ float) object)
   (follow-path (_type_) object))
  (:states
   rolling-rock-rolling
   rolling-rock-explode))

(defskelgroup *rolling-rock-shadow-sg*
  snow-ball
  snow-ball-shadow-lod0-jg
  -1
  ((snow-ball-shadow-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 -1.5 0 2)
  :shadow snow-ball-shadow-shadow-mg)

(deftype rolling-rock-shadow (process-drawable) ()
  (:states
   rolling-rock-shadow-idle))

(define *rolling-rock-shadow-control*
  (new 'static
       'shadow-control
       :settings
       (new 'static
            'shadow-settings
            :flags (shadow-flags disable-fade)
            :shadow-dir
            (new 'static 'vector :y -1.0 :w (meters 40))
            :bot-plane
            (new 'static 'plane :y 1.0 :w (meters 50))
            :top-plane
            (new 'static 'plane :y 1.0 :w (meters -2))
            :fade-dist (meters 1000))))

(defmethod init-from-entity! ((this rolling-rock-master) (e entity-actor))
  (logclear! (-> this mask) (process-mask actor-pause))
  (rolling-rock-master-initialize-paths this)
  (go rolling-rock-master-idle)
  (none))

(defbehavior rolling-rock-shadow-init-by-other rolling-rock-shadow ()
  (stack-size-set! (-> self main-thread) 128)
  (logclear! (-> self mask) (process-mask actor-pause movie enemy platform projectile))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self root trans quad) (-> (the-as process-drawable (-> self parent 0)) root trans quad))
  (quaternion-identity! (-> self root quat))
  (initialize-skeleton self *rolling-rock-shadow-sg* '())
  (ja-channel-set! 1)
  (ja :group! snow-ball-shadow-idle-ja :num! min)
  (set! (-> self draw shadow-ctrl) *rolling-rock-shadow-control*)
  (vector-copy! (-> self root scale) 
                (vector-float*! (new-stack-vector0) (-> (the-as process-drawable (-> self parent 0)) root scale) 2.0))
  (go rolling-rock-shadow-idle)
  (none))

(defbehavior rolling-rock-init-by-other rolling-rock ((e entity-actor) (this rolling-rock) (scale float) (path-name symbol) (speed float))
  (set! (-> self entity) e)
  (set! (-> self path) (new 'process 'curve-control self path-name -1000000000.0))
  (set! (-> self path-length) (path-distance (-> self path)))
  (set! (-> self path-speed) (/ 1.0 (/ (-> self path-length) speed)))
  (init-collision! self scale)
  (process-drawable-from-entity! self e)
  (set-vector! (-> self root scale) scale scale scale 1.0)
  (initialize-skeleton self *rolling-rock-sg* '())
  (vector-copy! (-> self root trans) (-> self path cverts 0))
  (logclear! (-> self mask) (process-mask actor-pause))
  (transform-post)
  (process-spawn rolling-rock-shadow :to self)
  (go rolling-rock-rolling))

(defmethod follow-path ((this rolling-rock))
  (let* ((pos (-> this root trans))
         (new-pos (vector-copy! (new-stack-vector0) pos)))
    (set! (-> this path-pos) (+ (-> this path-pos) (* (-> this path-speed) (seconds-per-frame))))
    (eval-path-curve! (-> this path) new-pos (-> this path-pos) 'interp)
    (let ((axis (vector-! (new-stack-vector0) pos new-pos))
          (angle (new-stack-quaternion0)))
      (quaternion-zxy! angle axis)
      (quaternion-rotate-local-y! angle angle (vector-y-angle axis))
      (set-quaternion! (-> this root) angle))
    (vector-copy! (-> this root trans) new-pos)))

(defmethod init-collision! ((this rolling-rock) (scale float))
  (let ((cshape (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> cshape dynam) (copy *standard-dynamics* 'process))
    (set! (-> cshape reaction) default-collision-reaction)
    (set! (-> cshape no-reaction)
          (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (let ((csphere (new 'process 'collide-shape-prim-sphere cshape (the-as uint 0))))
      (set! (-> csphere prim-core collide-as) (collide-kind enemy))
      (set! (-> csphere collide-with) (collide-kind target))
      (set! (-> csphere prim-core action) (collide-action solid))
      (set! (-> csphere prim-core offense) (collide-offense indestructible))
      (set-vector! (-> csphere local-sphere) 0.0 (* scale (meters 5.0)) 0.0 (* scale (meters 5.0)))
      (set-root-prim! cshape csphere))
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (backup-collide-with-as cshape)
    ;; (set-root-prim-collide-with! (-> this root) (collide-kind target))
    (set! (-> this root) cshape))
  (set-root-prim-collide-with! (-> this root) (collide-kind target))
  (set! (-> this root event-other) 'touch)
  (set! (-> this root event-self) 'touched))

(defmethod rolling-rock-master-initialize-paths ((this rolling-rock-master))
  (let ((paths '(patha pathb pathc pathd pathe pathf pathg pathh))
        (path-counter 0))
    (dotimes (i (length paths))
      (let* ((path-sym (the symbol (ref paths i)))
             (res-path (res-lump-struct (-> this entity) path-sym (inline-array vector))))
        (when res-path
          (set! (-> this path-array i) (new 'process 'curve-control this path-sym -1000000000.0))
          (logior! (-> this path-array path-counter flags) (path-control-flag display draw-line draw-point draw-text))
          (+! path-counter 1))))
    (set! (-> this path-count) path-counter))
  (set! (-> this scale-min) (/ (res-lump-float (-> this entity) 'scale-min :default (meters 5)) (meters 5)))
  (set! (-> this scale-max) (/ (res-lump-float (-> this entity) 'scale-max :default (meters 5)) (meters 5)))
  (set! (-> this freq-min) (res-lump-float (-> this entity) 'freq-min :default 2.0))
  (set! (-> this freq-max) (res-lump-float (-> this entity) 'freq-max :default 2.0))
  (set! (-> this speed-min) (res-lump-float (-> this entity) 'speed-min :default (meters 20.0)))
  (set! (-> this speed-max) (res-lump-float (-> this entity) 'speed-max :default (meters 25.0)))
  (set! (-> this last-path-picked) 0))

(defmethod relocate ((this rolling-rock-master) (off int))
  (dotimes (i (-> this path-count))
    (if (nonzero? (-> this path-array i)) (&+! (-> this path-array i) off)))
  (call-parent-method this off))

(defstate rolling-rock-master-idle (rolling-rock-master)
  :trans
    (behavior ()
      (when *display-path-marks*
        (dotimes (i (-> self path-count))
          (if (nonzero? (-> self path-array i)) (debug-draw (-> self path-array i))))))
  :code
    (behavior ()
      (loop
        (let ((time-rand (rand-vu-float-range (-> self freq-min) (-> self freq-max)))
              (path-rand (if (> (-> self path-count) 1) (rand-vu-int-range-exclude 1 (-> self path-count) (-> self last-path-picked)) 1))
              (scale-rand (rand-vu-float-range (-> self scale-min) (-> self scale-max)))
              (speed-rand (rand-vu-float-range (-> self speed-min) (-> self speed-max))))
          (suspend-for (seconds time-rand))
          ;; (format 0
          ;;         "________________________________~%time-rand: ~F path-rand: ~D~%scale-rand: ~F last-path-picked: ~D~%"
          ;;         time-rand
          ;;         path-rand
          ;;         scale-rand
          ;;         (-> self last-path-picked))
          (process-spawn rolling-rock
                         (-> self entity)
                         self
                         scale-rand
                         (-> self path-array (- path-rand 1) name)
                         speed-rand
                         :to
                         self)
          (set! (-> self last-path-picked) path-rand))
        (suspend))))

(defstate rolling-rock-rolling (rolling-rock)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (format 0 "proc type: ~A message: ~A ~%" (-> proc type) message)
      (case message
        (('touch 'attack 'explode 'touched)
         (format 0 "inside touch proc type: ~A~%" (-> proc type))
         (if (= (-> proc type) target)
           (send-event proc 'attack (-> block param 0) (static-attack-info ((mode 'deadly)))))
         (go rolling-rock-explode))))
  :code
    (behavior ()
      (ja :group! rolling-rock-rolling-ja)
      (loop
        (ja :num! (loop!))
        (follow-path self)
        (if (>= (-> self path-pos) 1.0) (go rolling-rock-explode))
        (suspend)))
  :post
    (behavior ()
      (transform-post)
      ; (format *stdcon* "path #x~X~% pos ~f~%" (-> self path) (-> self path-pos))
      ))

(defstate rolling-rock-explode (rolling-rock)
  :code
    (behavior ()
      (clear-collide-with-as (-> self root))
      (sound-play "explosion" :vol 60)
      (process-spawn part-tracker
                       :init
                       part-tracker-init
                       (-> *part-group-id-table* 1050)
                       -1
                       #f
                       #f
                       #f
                       (-> self root trans)
                       :to
                       *entity-pool*)
      (let ((explode (the process-drawable
                          (ppointer->process (process-spawn joint-exploder
                                                            *rolling-rock-sg*
                                                            3
                                                            (new 'stack 'joint-exploder-tuning 0)
                                                            *rolling-rock-exploder-params*
                                                            :to
                                                            self))))))
      (suspend)
      (ja-channel-set! 0)
      (ja-post)
      (until (not (-> self child))
        (suspend))
      (cleanup-for-death self)))

(defstate rolling-rock-shadow-idle (rolling-rock-shadow)
  :trans
    (behavior ()
      (set! (-> self root trans quad) (-> (the-as process-drawable (-> self parent 0)) root trans quad))
      (vector+! (-> self root trans) (-> self root trans) (static-vectorm 0 3 0))
      0)
  :code
    (behavior ()
      (until (= (-> (the-as process-drawable (-> self parent 0)) next-state name) 'rolling-rock-explode)
        (suspend)))
  :post ja-post)