;;-*-Lisp-*-
(in-package goal)
(deftype rolling-rock-master (process)
  ((path-count       int32)
   (path-array       path-control 8)
   (scale-min        float)
   (scale-max        float)
   (freq-min         float)
   (freq-max         float)
   (last-path-picked int32))
  (:methods
   (rolling-rock-master-initialize-paths (_type_) object))
  (:states
   rolling-rock-master-idle))

(defskelgroup *rolling-rock-sg*
  rolling-rock
  rolling-rock-lod0-jg
  rolling-rock-idle-ja
  ((rolling-rock-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 5 0 10))

(deftype rolling-rock (process-drawable)
  ((root collide-shape-moving :override))
  (:states
   rolling-rock-rolling
   rolling-rock-explode))

(defmethod init-from-entity! ((this rolling-rock-master) (e entity-actor))
  (logclear! (-> this mask) (process-mask actor-pause))
  (rolling-rock-master-initialize-paths this)
  (go rolling-rock-master-idle)
  (none))

(defmethod rolling-rock-master-initialize-paths ((this rolling-rock-master))
  (let ((paths '(patha pathb pathc pathd pathe pathf pathg pathh))
        (path-counter 0))
    (dotimes (i (length paths))
      (let* ((path-sym (the symbol (ref paths i)))
             (res-path (res-lump-struct (-> this entity) path-sym structure))
             (this-path (-> this path-array path-counter)))
        (when res-path
          (set! (-> this path-array i) (new 'process 'path-control this path-sym 0.0))
          (logior! (-> this path-array path-counter flags) (path-control-flag display draw-line draw-point draw-text))
          (+! path-counter 1))))
    (set! (-> this path-count) path-counter))
  (set! (-> this scale-min) (res-lump-float (-> this entity) 'scale-min :default 1.0))
  (set! (-> this scale-max) (res-lump-float (-> this entity) 'scale-max :default 1.0))
  (set! (-> this freq-min) (res-lump-float (-> this entity) 'freq-min :default 2.0))
  (set! (-> this freq-max) (res-lump-float (-> this entity) 'freq-min :default 2.0)))

(defmethod relocate ((this rolling-rock-master) (off int))
  (dotimes (i (-> this path-count))
    (if (nonzero? (-> this path-array i)) (&+! (-> this path-array i) off)))
  (call-parent-method this off))

(defstate rolling-rock-master-idle (rolling-rock-master)
  :trans
    (behavior ()
      (when *display-path-marks*
        (dotimes (i (-> self path-count))
          (if (nonzero? (-> self path-array i)) (debug-draw (-> self path-array i))))))
  :code
    (behavior ()
      (loop
        (suspend))))

;; (defbehavior rolling-rock-init-by-other! rolling-rock ((this rolling-rock) (e entity-actor)))
