;;-*-Lisp-*-
(in-package goal)

(deftype breakable-boulder (process-drawable)
  ((cshape collide-shape :offset 112)
   (broken-look lod-set :inline)
   )
  (:states
    breakable-boulder-break
    breakable-boulder-idle
    )
  )

(defskelgroup *breakable-boulder-whole-sg* shortcut-boulder shortcut-boulder-whole-lod0-jg shortcut-boulder-idle-ja
              ((shortcut-boulder-whole-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 5.5 0 15.0)
              )

(defskelgroup *breakable-boulder-broken-sg* shortcut-boulder shortcut-boulder-broken-lod0-jg shortcut-boulder-idle-ja
              ((shortcut-boulder-broken-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 5.5 0 20)
              )

(defstate breakable-boulder-break (breakable-boulder)
  :enter (behavior ()
    (sound-play "zoomer-explode")
    (none)
    )
  :code (behavior ()
    (process-entity-status! self (entity-perm-status complete) #t)
    (lods-assign! (-> self draw) (-> self broken-look))
    (process-spawn part-tracker :init part-tracker-init (-> *part-group-id-table* 903) -1 #f #f #f (-> self cshape trans)
      :to *entity-pool*
      )
    (ja-no-eval :group! (ja-group) :num! (seek!) :frame-num 0.0)
    (until (ja-done? 0)
      (suspend)
      (ja :num! (seek!))
      )
    (cleanup-for-death self)
    (deactivate self)
    (none)
    )
  :post ja-post
  )

(defstate breakable-boulder-idle (breakable-boulder)
  :event (behavior ((proc process) (argc int) (event-type symbol) (event event-message-block))
    (case event-type
      (('attack)
       (if (and (>= argc 2) (= (-> event param 1) 'racer-red-boost))
           (go breakable-boulder-break)
           )
       )
      )
    )
  :code (behavior ()
    (transform-post)
    (anim-loop)
    (none)
    )
  )

(defmethod init-from-entity! breakable-boulder ((this breakable-boulder) (entity entity-actor))
  (let ((cshape (new 'process 'collide-shape this (collide-list-enum hit-by-others))))
    (let ((prim-mesh (new 'process 'collide-shape-prim-mesh cshape (the uint 0) (the uint 0))))
      (set! (-> prim-mesh prim-core collide-as) (collide-kind wall-object))
      (set! (-> prim-mesh collide-with) (collide-kind target))
      (set! (-> prim-mesh prim-core action) (collide-action solid))
      (set! (-> prim-mesh prim-core offense) (collide-offense indestructible))
      (set! (-> prim-mesh transform-index) 3)
      (set-vector! (-> prim-mesh local-sphere) (meters 0) (meters 5.5) (meters 0) (meters 7.5))
      (set-root-prim! cshape prim-mesh)
      )
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (backup-collide-with-as cshape)
    (set! (-> this cshape) cshape)
    )
  (process-drawable-from-entity! this entity)
  (initialize-skeleton this *breakable-boulder-whole-sg* '())
  (setup-lods! (-> this broken-look) *breakable-boulder-broken-sg* (-> this draw art-group) (-> this entity))
  (set-vector! (-> this draw color-emissive) 0.125 0.0625 0.0 0.0)
  (go breakable-boulder-idle)
  (none)
  )