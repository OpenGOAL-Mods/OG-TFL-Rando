;;-*-Lisp-*-
(in-package goal)

(deftype tfl-hint (process-drawable)
  ((sound-to-play string)
   (sphere sphere :inline)
   ;; (sound-id sound-id)
   (mode symbol)
   (last-time time-frame)
   (voicebox handle)
   (hint-data tfl-hint-data)
   )
  (:methods
    (debug-draw (_type_) none)
    (get-hint-data (_type_) tfl-hint-data)
    (get-sphere-color (_type_) rgba)
    (target-in-sphere? (_type_) symbol)
    )
  (:states
    tfl-hint-idle
    tfl-hint-play
    tfl-hint-wait
    tfl-hint-exit
    )
  )

(define *tfl-hint-playing?* #f)
(define *tfl-hint-semaphore* (the (pointer tfl-hint) #f))

(defun get-tfl-hint ()
  (the tfl-hint (ppointer->process *tfl-hint-semaphore*))
  )

(defmethod deactivate ((this tfl-hint))
  (when (= (get-tfl-hint) this)
    (set! *tfl-hint-semaphore* (the (pointer tfl-hint) #f))
    (false! *tfl-hint-playing?*)
    )
  (call-parent-method this)
  )

(defmethod get-hint-data ((this tfl-hint))
  (dotimes (i (-> *tfl-hints* length))
    ;; (format #t "get-hint-data: item ~D ~S~%" i (-> *tfl-hints* i file-name))
    (if (string= (-> this sound-to-play) (-> *tfl-hints* i file-name))
      (return (the tfl-hint-data (-> *tfl-hints* i)))
      )
    )
  (the tfl-hint-data #f)
  )

(defmethod target-in-sphere? ((this tfl-hint))
  (aif *target*
    (let ((ear (sphere<-vector+r! (new 'stack 'sphere) (ear-trans) 0.0)))
      (spheres-overlap? ear (-> this sphere))
      )
    #f
    )
  )

(defmethod get-sphere-color ((this tfl-hint))
  (cond
    ((and (target-in-sphere? this) (not (= (get-tfl-hint) this))) *color-magenta*)
    ((= (get-tfl-hint) this) *color-green*)
    (else *color-red*)
    )
  )

(defmethod debug-draw ((this tfl-hint))
  (add-debug-text-sphere
    #t
    (bucket-id debug-no-zbuf)
    (-> this sphere)
    (-> this sphere r)
    (string-format "~S" (-> this hint-data file-name))
    (get-sphere-color this)
    )
  (none)
  )

(defmethod init-from-entity! ((this tfl-hint) (ent entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (logior! (-> this mask) (process-mask actor-pause))
  (vector-copy! (-> this root trans) (-> ent extra trans))
  (vector-identity! (-> this root scale))
  (set! (-> this sound-to-play) (aif (res-lump-struct ent 'filename string :time -1000000000.0) it "none"))
  (set! (-> this hint-data) (get-hint-data this))
  (sphere<-vector+r! (-> this sphere) (-> this root trans) (res-lump-float ent 'radius :default (meters 2.5)))
  (set! (-> this voicebox) (the handle #f))
  (go tfl-hint-idle)
  (none)
  )

(defbehavior tfl-hint-init-by-other tfl-hint ((sound string) (pos vector) (r float))
  (set! (-> self root) (new 'process 'trsqv))
  (logior! (-> self mask) (process-mask actor-pause))
  (vector-copy! (-> self root trans) pos)
  (vector-identity! (-> self root scale))
  (set! (-> self sound-to-play) sound)
  (set! (-> self hint-data) (get-hint-data self))
  (sphere<-vector+r! (-> self sphere) pos r)
  (set! (-> self voicebox) (the handle #f))
  (go tfl-hint-idle)
  (none)
  )


(defbehavior tfl-hint-post tfl-hint ()
  (debug-draw self)
  (none)
  )

;; (defbehavior tfl-hint-event-handler ((proc process) (argc int) (message symbol) (block event-message-block))
;;   (case message
;;     (('exit)
;;       ;; (when (nonzero? (-> self sound-id))
;;       ;;   (sound-stop (-> self sound-id))
;;       ;;   (set! (-> self sound-id) (new 'static 'sound-id))
;;       ;;   )
;;       (go tfl-hint-exit)
;;       )
;;     (('die)
;;       (go tfl-hint-exit)
;;       )
;;     )
;;   )

(defstatehandler tfl-hint
  ;; :event tfl-hint-event-handler
  :post tfl-hint-post
  )

(defstate tfl-hint-idle (tfl-hint)
  :enter (behavior ()
    (if (and (-> self hint-data repeat?) (not (time-elapsed? (-> self last-time) (-> self hint-data repeat-delay))))
      (go tfl-hint-wait)
      )
    )
  :trans (behavior ()
    (when (target-in-sphere? self)
      (let ((seen? (seen-text? *game-info* (-> self hint-data text-id))))
        (when (and (not (= (get-tfl-hint) self))
                   (target-in-sphere? self)
                   ;; either hint was not yet seen or it was seen, can be repeated and the delay has passed
                   (or (not seen?) (and seen? (-> self hint-data repeat?) (time-elapsed? (-> self last-time) (-> self hint-data repeat-delay))))
                   )
          (go tfl-hint-play)
          )
        )
      )
    )
  :code sleep-code
  )

(defstate tfl-hint-wait (tfl-hint)
  :trans (behavior ()
    ;; (format 0 "~A: waiting for delay ~D~%" (-> self name) (-> self hint-data repeat-delay))
    (when (time-elapsed? (-> self last-time) (-> self hint-data repeat-delay))
      (go tfl-hint-idle)
      )
    )
  :code sleep-code
  )

(defstate tfl-hint-play (tfl-hint)
  :enter (behavior ()
    (let ((hint (get-tfl-hint)))
      (if (and hint (not (-> hint hint-data interrupt?)))
        (go tfl-hint-idle)
        )
      (if (not hint)
        (set! *tfl-hint-semaphore* (the (pointer tfl-hint) (process->ppointer self)))
        )
      (if (and hint *tfl-hint-playing?* (not (-> hint hint-data interrupt?)))
        (go tfl-hint-idle)
        )
      )
    (if (> (-> self hint-data text-id) (text-id zero))
      (mark-text-as-seen *game-info* (-> self hint-data text-id))
      )
    (if (> (-> self hint-data close-task) (game-task none))
      (close-specific-task! (-> self hint-data close-task) (task-status need-resolution))
      )
    )
  :code (behavior ()
    (when (and (or (-> self hint-data force-playback?) (-> *setting-control* current play-hints)) (< 0.0 (-> *setting-control* current dialog-volume)))
      (if (-> self hint-data voicebox?)
        (aif *target* (set! (-> self voicebox) (ppointer->handle (voicebox-spawn it (target-pos 0)))))
        )
      (while (handle->process (-> *game-info* auto-save-proc))
        (suspend)
        )
      (while (not *sound-player-enable*)
        (suspend)
        )
      (set-time! (-> self last-time))
      (play-tfl-hint (-> self hint-data file-name) (-> *setting-control* current dialog-volume) (-> self hint-data interrupt?))
      (dotimes (i 2) (suspend))
      (add-setting! 'music-volume 'rel (-> *setting-control* current music-volume-movie) 0)
      (add-setting! 'sfx-volume 'rel (-> *setting-control* current sfx-volume-movie) 0)
      (add-setting! 'dialog-volume 'rel (-> *setting-control* current dialog-volume-hint) 0)
      (while *tfl-hint-playing?*
        (suspend)
        )
      )
    )
  :exit (behavior ()
    (remove-setting! 'music-volume)
    (remove-setting! 'sfx-volume)
    (remove-setting! 'dialog-volume)
    (when (= (get-tfl-hint) self)
      (set! *tfl-hint-semaphore* (the (pointer tfl-hint) #f))
      (false! *tfl-hint-playing?*)
      )
    (send-event (handle->process (-> self voicebox)) 'die)
    ;; (if (-> self hint-data repeat?)
    ;;   (go tfl-hint-wait)
    ;;   )
    )
  )

(defstate tfl-hint-exit (tfl-hint)
  :code (behavior () (deactivate self))
  )
