;;-*-Lisp-*-
(in-package goal)
(require "engine/geometry/vol.gc")
(deftype tfl-cam-control (process-drawable)
  ((cam-dest          vector :inline)
   (cam-pos           vector :inline)
   (cam-lerp          vector :inline)
   (move-timer        time-frame)
   (max-y             float)
   (min-y             float)
   (max-z             float)
   (min-z             float)
   (push-z            float)
   (tilt-adjust       float)
   (track-speed       float)
   (track-accel       float)
   (max-y-start       float)
   (min-y-start       float)
   (max-z-start       float)
   (min-z-start       float)
   (tilt-adjust-start float)
   (reset-speed       time-frame)
   (state-time2       time-frame))
  (:methods
   (reset-cam-defaults (_type_) object)
   (should-activate? (_type_) object))
  (:states
   tfl-cam-control-idle
   tfl-cam-control-active))

(defbehavior tfl-cam-control-lerp-vector tfl-cam-control ((cam-dist float))
  (send-event *camera* 'toggle-slave-option (cam-slave-options LINE_OF_SIGHT))
  (until (or (time-elapsed? (-> self state-time) (-> self move-timer)) (not (should-activate? self)))
    (let* ((cam-start (-> self cam-pos))
           (cam-lerp (-> self cam-lerp))
           (cam-target (-> self cam-dest))
           (timer (/ (the float (- (current-time) (-> self state-time))) TICKS_PER_SECOND))
           (move-timer-float (/ (the float (-> self move-timer)) TICKS_PER_SECOND))
           (smooth-lerp (+ (* -0.06 (sin (+ (/ timer move-timer-float) TWO_PI))) (/ timer move-timer-float))))
      (send-event *target* 'no-look-around (seconds 0.25))
      (set! (-> *camera* stringMaxHeight) (lerp (-> self max-y-start) (-> self max-y) smooth-lerp))
      (set! (-> *camera* stringMinHeight) (lerp (-> self min-y-start) (-> self min-y) smooth-lerp))
      (set! (-> *camera* stringMaxLength) (lerp (-> self max-z-start) (-> self max-z) smooth-lerp))
      (set! (-> *camera* stringMinLength) (lerp (-> self min-z-start) (-> self min-z) smooth-lerp))
      (set! (-> *camera* string-push-z) (lerp cam-dist (-> self push-z) smooth-lerp))
      (set! (-> *CAMERA-bank* default-tilt-adjust) (lerp (-> self tilt-adjust-start) (-> self tilt-adjust) smooth-lerp))
      (set! (-> *CAMERA-bank* default-tilt-adjust) (lerp (-> self tilt-adjust-start) (-> self tilt-adjust) smooth-lerp))
      (set! (-> *CAMERA-bank* default-track-speed)
            (lerp (-> *CAMERA-bank* default-track-speed) (-> self track-speed) smooth-lerp))
      (set! (-> *camera-combiner* tracking tilt-adjust target) (-> *CAMERA-bank* default-tilt-adjust))
      (false! *camera-read-analog*)
      (false! *camera-read-buttons*)
      (vector-lerp! cam-lerp cam-start cam-target smooth-lerp)
      ;; (format 0 "~I~%" self)
      ;; (format *stdcon* "~%~%~%~%proc ~A~%cam-dist: ~M~%" self cam-dist)
      ;; (format *stdcon* "state-time ~D~%" (-> self state-time))
      ;; (format *stdcon* "move-timer ~E~%" (-> self move-timer))
      ;; (format *stdcon* "timer ~F~%" timer)
      ;; (format *stdcon* "smooth-lerp ~F~%" smooth-lerp)
      ;; (format *stdcon* "cam-start X ~M Y ~M Z ~M~%" (-> cam-start x) (-> cam-start y) (-> cam-start z))
      ;; (format *stdcon* "cam-target X ~M Y ~M Z ~M~%" (-> cam-target x) (-> cam-target y) (-> cam-target z))
      ;; (format *stdcon* "cam-lerp X ~M Y ~M Z ~M~%" (-> cam-lerp x) (-> cam-lerp y) (-> cam-lerp z))
      ;; (format *stdcon* "*camera* string-push-z ~M~%" (-> *camera* string-push-z))
      ;; (format *stdcon* "*camera-combiner* tracking tilt-adjust ~R~%" (-> *camera-combiner* tracking tilt-adjust target))
      (send-event *camera* 'teleport-to-vector-smooth cam-lerp))
    (suspend))
  (send-event *camera* 'toggle-slave-option (cam-slave-options LINE_OF_SIGHT))
  (true! *camera-read-analog*)
  (true! *camera-read-buttons*))

(defmethod init-from-entity! ((this tfl-cam-control) (e entity-actor))
  (stack-size-set! (-> this main-thread) 512)
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this e)
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this vol) (new 'process 'vol-control this))
  (let ((cam-p (res-lump-struct e 'cam-position vector))
        (move-t (res-lump-float e 'move-timer :default 1.0))
        (reset-t (res-lump-float e 'reset-speed :default 1.0)))
    (when cam-p
      (set-vector! (-> this cam-dest) (-> cam-p x) (-> cam-p y) (-> cam-p z) 1.0))
    (set! (-> this move-timer) (the time-frame (seconds move-t)))
    (set! (-> this reset-speed) (the time-frame (seconds reset-t))))
  (set! (-> this max-y) (res-lump-float e 'max-y :default (meters 3)))
  (set! (-> this min-y) (res-lump-float e 'min-y :default (meters 1)))
  (set! (-> this max-z) (res-lump-float e 'max-z :default (meters 1235)))
  (set! (-> this min-z) (res-lump-float e 'min-z :default (meters 5)))
  (set! (-> this push-z) (res-lump-float e 'push-z :default (meters 10)))
  (set! (-> this tilt-adjust) (res-lump-float e 'tilt-adjust :default (degrees -6.5000005)))
  (set! (-> this track-speed) (res-lump-float e 'track-speed :default (meters 0.6)))
  (set! (-> this track-accel) (res-lump-float e 'track-accel :default (meters 0.005)))
  ;; (set! (-> this reset-speed) (res-lump-float e 'reset-speed :default (the time-frame (seconds 2.0))))
  (go tfl-cam-control-idle)
  (none))

(defmethod deactivate ((this tfl-cam-control))
  (when (and *camera* *camera-combiner*)
    (set! (-> *camera* stringMaxHeight) (-> *CAMERA-bank* default-string-max-y))
    (set! (-> *camera* stringMinHeight) (-> *CAMERA-bank* default-string-min-y))
    (set! (-> *camera* stringMaxLength) (-> *CAMERA-bank* default-string-max-z))
    (set! (-> *camera* stringMinLength) (-> *CAMERA-bank* default-string-min-z))
    (set! (-> *camera* string-push-z) (-> *CAMERA-bank* default-string-push-z))
    (set! (-> *camera-combiner* tracking tilt-adjust target) (-> *CAMERA-bank* default-tilt-adjust)))
  (set! (-> *CAMERA-bank* default-track-speed) (meters 0.6))
  (set! (-> *CAMERA-bank* default-track-accel) (meters 0.005))
  (set! (-> *CAMERA-bank* default-tilt-adjust) (degrees -6.5000005))
  (true! *camera-read-analog*)
  (true! *camera-read-buttons*)
  (call-parent-method this))

(defmethod should-activate? ((this tfl-cam-control))
  (aif *target* (point-in-vol? (-> this vol) (-> it control trans))))

(defmethod reset-cam-defaults ((this tfl-cam-control))
  (when (and *camera* *camera-combiner*)
    (set! (-> *camera* stringMaxHeight) (-> *CAMERA-bank* default-string-max-y))
    (set! (-> *camera* stringMinHeight) (-> *CAMERA-bank* default-string-min-y))
    (set! (-> *camera* stringMaxLength) (-> *CAMERA-bank* default-string-max-z))
    (set! (-> *camera* stringMinLength) (-> *CAMERA-bank* default-string-min-z))
    (set! (-> *camera* string-push-z) (-> *CAMERA-bank* default-string-push-z)))
  (set! (-> *CAMERA-bank* default-track-speed) (meters 0.6))
  (set! (-> *CAMERA-bank* default-track-accel) (meters 0.005))
  ;; (set! (-> *CAMERA-bank* default-tilt-adjust) (degrees -6.5000005))
  ;; (set! (-> *camera-combiner* tracking tilt-adjust target) (-> *CAMERA-bank* default-tilt-adjust))
  (true! *camera-read-analog*)
  (true! *camera-read-buttons*)
  (send-event *camera* 'change-state *camera-base-mode* (-> this reset-speed))
  ;; (format 0 "state-time2: ~D~%" (-> this state-time2))
  ;; (format 0 "current-time: ~D~%" (current-time))
  ;; (format 0 "reset-speed: ~E~%" (-> this reset-speed))
  ;; (format 0 "move-timer: ~E~%" (-> this move-timer))
  (until (time-elapsed? (-> this state-time2) (-> this reset-speed))
    ;; (format *stdcon* "~%~%~% in until ~%")
    ;; (format *stdcon* "current-time ~D~%" (current-time))
    (let* ((timer (/ (the float (- (current-time) (-> this state-time2))) TICKS_PER_SECOND))
           (reset-speed-float (/ (the float (-> this reset-speed)) TICKS_PER_SECOND))
           (lerp-timer (/ timer reset-speed-float))
           (start-tilt-adjust (-> *CAMERA-bank* default-tilt-adjust)))
      ;; (format *stdcon* "~%~%current-time ~D~%" (current-time))
      ;; (format *stdcon* "state-time2 ~D~%" (-> this state-time2))
      ;; (format *stdcon* "reset-speed ~E~%" (-> this reset-speed))
      ;; (format *stdcon* "timer ~F~%" timer)
      (set! (-> *CAMERA-bank* default-tilt-adjust) (lerp start-tilt-adjust (degrees -6.5000005) lerp-timer))
      (when (and *camera* *camera-combiner*)
        (set! (-> *camera-combiner* tracking tilt-adjust target) (lerp start-tilt-adjust (degrees -6.5000005) lerp-timer))))
    (suspend)))

(defstate tfl-cam-control-idle (tfl-cam-control)
  ;; :enter
  ;;   (behavior ()
  ;;     (set-time! (-> self state-time2))
  ;;     ;; (format 0 "state-time2 ~D ~%" (-> self state-time2))
  ;;     (reset-cam-defaults self))
  :code
  (behavior ()
    (set-time! (-> self state-time2))
    (reset-cam-defaults self)
    (loop
      (if (should-activate? self) (go tfl-cam-control-active))
      (suspend))))

(defstate tfl-cam-control-active (tfl-cam-control)
  :enter
    (behavior ()
      (set-time! (-> self state-time)))
  :code
    (behavior ()
      (let ((cam-dist (vector-length (-> (-> *camera* slave 0 0) view-flat))))
        (vector-copy! (-> self cam-pos) (camera-pos))
        (set! (-> self max-y-start) (-> *camera* stringMaxHeight))
        (set! (-> self min-y-start) (-> *camera* stringMinHeight))
        (set! (-> self max-z-start) (-> *camera* stringMaxLength))
        (set! (-> self min-z-start) (-> *camera* stringMinLength))
        (set! (-> self tilt-adjust-start) (-> *camera-combiner* tracking tilt-adjust target))
        (tfl-cam-control-lerp-vector cam-dist))
      (loop
        (if (not (should-activate? self)) (go tfl-cam-control-idle))
        (suspend)))
  ;; :exit
  ;;   (behavior ()
  ;;     (reset-cam-defaults self))
  )
