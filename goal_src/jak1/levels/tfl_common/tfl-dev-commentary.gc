;;-*-Lisp-*-
(in-package goal)

;; overridden to disable grabbing jak, this is handled by commands instead
(deftype commentary-camera (pov-camera) ())

(defstate pov-camera-start-playing (commentary-camera)
  :virtual #t
  :code
    (behavior ()
      (logclear! (-> self mask) (process-mask actor-pause))
      (let ((gp-0 0))
        (let ((v1-7 (lookup-art (-> self draw jgeo) "camera" (the-as type #f)))) (if v1-7 (set! gp-0 (+ (-> v1-7 number) 1))))
        (let ((v1-10 (process-spawn othercam self gp-0 #t #t :to self)))
          (send-event (ppointer->process v1-10) 'mask (-> self mask-to-clear))))
      (go-virtual pov-camera-playing)))

(defstate pov-camera-done-playing (pov-camera)
  :virtual #t
  :code
    (behavior ()
      (send-event (handle->process (-> self notify-handle)) 'notify 'die)
      (suspend)
      (suspend)
      (cleanup-for-death self)
      (deactivate self)))

(deftype tfl-dev-commentary-settings (structure)
  ((enabled? symbol)
   (playing? symbol)
   (vol      float)))

(define-perm *tfl-dev-commentary*
             tfl-dev-commentary-settings
             (new 'static 'tfl-dev-commentary-settings :enabled? #t :vol 1.0))

(define *tfl-dev-commentary-playing?* (-> *tfl-dev-commentary* playing?))

(define *display-tfl-commentary-marks* #t)

(defun tfl-commentary-volume ()
  (-> *tfl-dev-commentary* vol))

(def-art-elt tfl-commentary-node-ag tfl-commentary-node-lod0-jg 0)
(def-art-elt tfl-commentary-node-ag tfl-commentary-node-lod0-mg 1)
(def-art-elt tfl-commentary-node-ag tfl-commentary-node-idle-ja 2)
(defskelgroup *tfl-commentary-node-sg*
  tfl-commentary-node
  tfl-commentary-node-lod0-jg
  tfl-commentary-node-idle-ja
  ((tfl-commentary-node-lod0-mg (meters 9999999)))
  :bounds (static-spherem 0 0 0 5))

(def-art-elt tfl-commentary-node-active-ag tfl-commentary-node-active-lod0-jg 0)
(def-art-elt tfl-commentary-node-active-ag tfl-commentary-node-active-lod0-mg 1)
(def-art-elt tfl-commentary-node-active-ag tfl-commentary-node-active-idle-ja 2)
(defskelgroup *tfl-commentary-node-active-sg*
  tfl-commentary-node-active
  tfl-commentary-node-active-lod0-jg
  tfl-commentary-node-active-idle-ja
  ((tfl-commentary-node-active-lod0-mg (meters 9999999)))
  :bounds (static-spherem 0 0 0 5))

(deftype tfl-commentary-keyframes (basic)
  ((num-cmds int32)
   (data     time-frame :dynamic))
  (:methods
   (new (symbol type int) _type_)))

(defmethod asize-of ((this tfl-commentary-keyframes))
  (+ (the int (-> this type size)) (* 8 (-> this num-cmds))))

(defmethod new tfl-commentary-keyframes ((allocation symbol) (type-to-make type) (cmd-len int))
  (let* ((this (object-new allocation type-to-make (the int (+ (-> type-to-make size) (* 8 cmd-len))))))
    (set! (-> this num-cmds) cmd-len)
    this))

(deftype tfl-commentary-node (process-drawable)
  ((sound-to-play  string)
   (length         float)
   (last-time      time-frame)
   (play-time      time-frame)
   (activate-range float)
   (active?        symbol)
   (inactive-look  lod-set :inline)
   (active-look    lod-set :inline)
   (data           tfl-commentary-data)
   (cur-frame      time-frame)
   (cam            handle)
   (cmd-frames     tfl-commentary-keyframes))
  (:methods
   (common-init (_type_) object)
   (init-keyframes (_type_) object)
   (get-bg-width-for-str (_type_ string) float)
   (draw-hud (_type_) object)
   (handle-input (_type_) object)
   (debug-draw (_type_) object)
   (time->string (_type_) string)
   (debug-print (_type_ symbol) string)
   (can-activate? (_type_) symbol)
   (rot-speed (_type_) degrees)
   (set-look! (_type_ symbol) object)
   (execute-cmds (_type_ pair) object)
   (execute-single-cmd (_type_ pair) object)
   (execute-cmds-at-frame (_type_ time-frame) object)
   (has-cmds-at-frame? (_type_ time-frame) symbol)
   (get-cmds-at-frame (_type_ time-frame) pair)
   (get-commentary-data (_type_) tfl-commentary-data))
  (:state-methods
   hidden
   idle
   playing
   paused))

(defmacro commentary-debug (&rest body)
  `(#if TFL_COMMENTARY_DEBUG (begin   ,@body) (empty)))

(define *tfl-commentary-node-string* (new 'debug 'string 128 (the string #f)))

(defmethod deactivate ((this tfl-commentary-node))
  (call-parent-method this))

(defmethod relocate ((this tfl-commentary-node) (off int))
  (if (nonzero? (-> this cmd-frames)) (&+! (-> this cmd-frames) off))
  (call-parent-method this off))

(defmethod get-commentary-data ((this tfl-commentary-node))
  (dotimes (i (-> *tfl-commentary-nodes* length))
    (if (string= (-> this sound-to-play) (-> *tfl-commentary-nodes* i file-name))
      (return (the tfl-commentary-data (-> *tfl-commentary-nodes* i)))))
  (the tfl-commentary-data #f))

(defmethod can-activate? ((this tfl-commentary-node))
  (aif *target*
       (and (not (logtest? (-> it state-flags) (state-flags grabbed first-person-mode)))
            (< (vector-vector-distance (target-pos 0) (-> this root trans)) (-> this activate-range)))))

(defmethod debug-print ((this tfl-commentary-node) (line symbol))
  (case line
    (('len)
     (format (clear *tfl-commentary-node-string*)
             "~,,2es/~,,2es"
             (- (current-time) (-> this play-time))
             (-> this data length)))
    (('cmd) (format (clear *tfl-commentary-node-string*) "cmd ~A" (-> this data cmd-list)))
    (else (clear *tfl-commentary-node-string*)))
  *tfl-commentary-node-string*)

(defmethod debug-draw ((this tfl-commentary-node))
  (when (< (vector-vector-distance (target-pos 0) (-> this root trans)) (meters 50))
    (let ((y (new 'stack 'vector2h))
          (y-inc! (lambda ((y vector2h)) (+! (-> y y) 8) y)))
      (add-debug-sphere #t (bucket-id debug-no-zbuf) (-> this root trans) (-> this activate-range) (static-rgba 0 #xff 0 80))
      (add-debug-text-3d #t (bucket-id debug-no-zbuf) (the string (-> this name)) (-> this root trans) (font-color white) y)
      (add-debug-text-3d #t
                         (bucket-id debug-no-zbuf)
                         (tfl-commentary-dev->string (-> this data dev-name))
                         (-> this root trans)
                         (font-color orange)
                         (y-inc! y))
      (if (< (- (current-time) (-> this play-time)) (-> this data length))
        (add-debug-text-3d #t
                           (bucket-id debug-no-zbuf)
                           (debug-print this 'len)
                           (-> this root trans)
                           (font-color white)
                           (y-inc! y)))
      (if (not (null? (-> this data cmd-list)))
        (add-debug-text-3d #t
                           (bucket-id debug-no-zbuf)
                           (debug-print this 'cmd)
                           (-> this root trans)
                           (font-color white)
                           (y-inc! y))))))

(defmethod rot-speed ((this tfl-commentary-node))
  (case (-> this next-state name)
    (('playing) (degrees 150))
    (('idle) (if (can-activate? this) (degrees 90) (degrees 30)))
    (('hidden) (degrees 0))))

(defmethod set-look! ((this tfl-commentary-node) (look symbol))
  (case look
    (('inactive) (lods-assign! (-> this draw) (-> this inactive-look)))
    (('active) (lods-assign! (-> this draw) (-> this active-look)))))

(defmethod init-keyframes ((this tfl-commentary-node))
  (let* ((cmds (-> this data cmd-list))
         (len (length cmds)))
    (dotimes (i len)
      (let* ((cmd (the pair (ref cmds i)))
             (frame (car cmd)))
        (case frame
          (('start) (set! (-> this cmd-frames data i) (seconds 0)))
          (('end) (set! (-> this cmd-frames data i) (-> this data length)))
          (else (set! (-> this cmd-frames data i) (/ (the time-frame frame) 8))))))))

(defmacro unbox-float (bfloat)
  `(-> (the bfloat ,bfloat) data))

(defmethod execute-single-cmd ((this tfl-commentary-node) (cmd pair))
  (format 0 "tfl-commentary-node::parse-cmd executing cmd ~A~%" cmd)
  (let ((c (car cmd))
        (rest (cdr cmd)))
    (case c
      (('grab) (process-grab? *target*))
      (('release) (process-release? *target*))
      (('music) (add-setting! 'music-volume 'abs (unbox-float (ref rest 0)) 0))
      (('sfx) (add-setting! 'sfx-volume 'abs (unbox-float (ref rest 0)) 0))
      (('dialog) (add-setting! 'dialog-volume 'abs (unbox-float (ref rest 0)) 0))
      (('camera)
       (let* ((sg (the symbol (ref rest 0)))
              (vec (the pair (ref rest 1)))
              (pos (new-stack-vector0))
              (cam-name (the string (ref rest 2))))
         (set! (-> pos x) (meters (unbox-float (ref vec 1))))
         (set! (-> pos y) (meters (unbox-float (ref vec 2))))
         (set! (-> pos z) (meters (unbox-float (ref vec 3))))
         (set! (-> pos w) 1.0)
         (set! (-> this cam)
               (ppointer->handle (process-spawn commentary-camera
                                                :init
                                                pov-camera-init-by-other
                                                pos
                                                (-> sg value)
                                                cam-name
                                                (pov-camera-flag inherit-orientation notify-of-abort)
                                                #f
                                                '()
                                                :to
                                                this)))))
      (else (format 0 "tfl-commentary-node::parse-cmd unhandled cmd ~A~%" c) #t))))

(defmethod execute-cmds ((this tfl-commentary-node) (cmds pair))
  (dotimes (i (length cmds))
    (execute-single-cmd this (the pair (cdr (the pair (ref cmds i)))))))

(defmethod has-cmds-at-frame? ((this tfl-commentary-node) (frame time-frame))
  (dotimes (i (-> this cmd-frames num-cmds))
    (when (= (-> this cmd-frames data i) frame)
      (return #t)))
  #f)

(defmethod get-cmds-at-frame ((this tfl-commentary-node) (frame time-frame))
  (let ((cmds '()))
    (dotimes (i (-> this cmd-frames num-cmds))
      (if (= (-> this cmd-frames data i) frame) (cons! cmds (ref (-> this data cmd-list) i))))
    cmds))

(defmethod execute-cmds-at-frame ((this tfl-commentary-node) (frame time-frame))
  (execute-cmds this (get-cmds-at-frame this frame)))

(defmethod handle-input ((this tfl-commentary-node))
  (cond
    ((and (cpad-hold? 0 l2) (cpad-pressed? 0 up))
     (set! (-> *tfl-dev-commentary* vol) (fmin 1.0 (+ (-> *tfl-dev-commentary* vol) 0.1))))
    ((and (cpad-hold? 0 l2) (cpad-pressed? 0 down))
     (set! (-> *tfl-dev-commentary* vol) (fmax 0.0 (- (-> *tfl-dev-commentary* vol) 0.1))))
    ((and (cpad-hold? 0 l2) (cpad-pressed? 0 circle))
     ; (stop-tfl-commentary)
     (if (handle->process (-> this cam)) (send-event (handle->process (-> this cam)) 'abort))
     (process-release? *target*)
     (set! (-> this cam) INVALID_HANDLE)
     (go-virtual idle :proc this))))

(defun rminutes ((time time-frame))
  (/ time (* TICKS_PER_SECOND 60)))

(defun rseconds ((time time-frame))
  (/ (mod time (* TICKS_PER_SECOND 60)) TICKS_PER_SECOND))

(defmethod time->string ((this tfl-commentary-node))
  (let ((m-len (rminutes (-> this data length)))
        (s-len (rseconds (-> this data length)))
        (m-cur (rminutes (-> this cur-frame)))
        (s-cur (rseconds (-> this cur-frame))))
    (format (clear *tfl-commentary-node-string*) "~2,'0D:~2,'0D/~2,'0D:~2,'0D" m-cur s-cur m-len s-len))
  *tfl-commentary-node-string*)

(defmethod get-bg-width-for-str ((this tfl-commentary-node) (str string))
  (let ((ctx (new 'stack 'font-context *font-default-matrix* 0 0 0.0 (font-color default) (font-flags shadow kerning))))
    (get-string-length str ctx)))

(defmethod draw-hud ((this tfl-commentary-node))
  (mlet ((HUD_Y 32))
        (with-dma-buffer-add-bucket ((buf (-> (current-frame) debug-buf)) (bucket-id debug))
          ;; bg box
          (draw-sprite2d-xy buf
                            13
                            (- HUD_Y 2)
                            (the int
                                 (* (+ (get-bg-width-for-str this
                                                             (string-format "~4L~S~0L (~8L~S~0L)" (-> this data description) (tfl-commentary-dev->string (-> this data dev-name))))
                                       7.0)
                                    (-> *video-parms* relative-x-scale)))
                            (the int (* (the float (+ HUD_Y (* 2 8))) (-> *video-parms* relative-y-scale)))
                            (static-rgba 0 0 0 #x50))
          (draw-string-xy (string-format "~4L~S~0L (~8L~S~0L)" (-> this data description) (tfl-commentary-dev->string (-> this data dev-name)))
                          buf
                          14
                          (+ HUD_Y (* 0 8))
                          (font-color default)
                          (font-flags shadow kerning))
          (draw-string-xy (string-format "Volume ~8L~D%~0L" (the int (* (-> *tfl-dev-commentary* vol) 100.0)))
                          buf
                          14
                          (+ HUD_Y (* 1 8))
                          (font-color default)
                          (font-flags shadow kerning))
          (draw-string-xy "L2 + Up: ~3LVolume Up~0L" buf 14 (+ HUD_Y (* 2 8)) (font-color default) (font-flags shadow kerning))
          (draw-string-xy "L2 + Down: ~3LVolume Down~0L"
                          buf
                          14
                          (+ HUD_Y (* 3 8))
                          (font-color default)
                          (font-flags shadow kerning))
          (draw-string-xy "L2 + Circle: ~3LStop Playback~0L"
                          buf
                          14
                          (+ HUD_Y (* 4 8))
                          (font-color default)
                          (font-flags shadow kerning))
          (draw-sprite2d-xy buf
                            120
                            177
                            (the int
                                 (* (+ (get-bg-width-for-str this (string-format "~21L~S~0L" (time->string this))) 3.0)
                                    (-> *video-parms* relative-x-scale)))
                            (the int (* 8 (-> *video-parms* relative-y-scale)))
                            (static-rgba 0 0 0 #x40))
          (draw-string-xy (string-format "~21L~S~0L" (time->string this))
                          buf
                          120
                          177
                          (font-color default)
                          (font-flags shadow kerning)))
        (debug-percent-bar #t
                           (bucket-id debug)
                           120
                           160
                           (/ (the float (- (current-time) (-> this play-time))) (the float (-> this data length)))
                           (static-rgba #xff 80 0 #x80))))

(defmethod common-init ((this tfl-commentary-node))
  (set! (-> this root) (new 'process 'trsqv))
  (logior! (-> this mask) (process-mask actor-pause))
  (initialize-skeleton this *tfl-commentary-node-sg* '())
  (setup-lods! (-> this inactive-look) *tfl-commentary-node-sg* (-> this draw art-group) (-> this entity))
  (setup-lods! (-> this active-look)
               *tfl-commentary-node-active-sg*
               (art-group-get-by-name (-> *level* level-default) "tfl-commentary-node-active")
               (-> this entity))
  (set-look! this 'inactive)
  (set! (-> this cam) INVALID_HANDLE))

(defmethod init-from-entity! ((this tfl-commentary-node) (ent entity-actor))
  (common-init this)
  (process-drawable-from-entity! this ent)
  (set! (-> this sound-to-play) (aif (res-lump-struct ent 'filename string) it (the string #f)))
  (set! (-> this data) (get-commentary-data this))
  (set! (-> this activate-range) (res-lump-float ent 'radius :default (meters 6)))
  (set! (-> this cmd-frames) (new 'process 'tfl-commentary-keyframes (length (-> this data cmd-list))))
  (init-keyframes this)
  (ja-post)
  (if (-> *tfl-dev-commentary* enabled?)
    (if (or (not (-> this data)) (not (-> this sound-to-play)))
      (go process-drawable-art-error "no commentary data")
      (go-virtual idle :proc this))
    (go-virtual hidden :proc this))
  (none))

(defbehavior tfl-commentary-node-init-by-other tfl-commentary-node ((sound string) (pos vector) (r float))
  (common-init self)
  ; (set! (-> self name)
  ;       (begin
  ;         (format (clear *tfl-commentary-node-string*) "tfl-commentary-node-~D" (rand-vu-int-range 1 99))
  ;         *tfl-commentary-node-string*))
  (vector-copy! (-> self root trans) pos)
  (vector-identity! (-> self root scale))
  (quaternion-identity! (-> self root quat))
  (set! (-> self sound-to-play) sound)
  (set! (-> self data) (get-commentary-data self))
  (set! (-> self activate-range) r)
  (set! (-> self cmd-frames) (new 'process 'tfl-commentary-keyframes (length (-> self data cmd-list))))
  (init-keyframes self)
  (ja-post)
  (if (-> *tfl-dev-commentary* enabled?)
    (if (or (not (-> self data)) (not (-> self sound-to-play)))
      (go process-drawable-art-error "no commentary data")
      (go-virtual idle))
    (go-virtual hidden))
  (none))

(defbehavior tfl-commentary-node-post tfl-commentary-node ()
  (if *display-tfl-commentary-marks* (debug-draw self))
  (quaternion-rotate-y! (-> self root quat) (-> self root quat) (* (rot-speed self) (seconds-per-frame)))
  (if (not (-> *tfl-dev-commentary* enabled?)) (go-virtual hidden))
  (ja-post)
  (none))

(defbehavior tfl-commentary-node-event-handler tfl-commentary-node ((proc process) (argc int) (message symbol) (block event-message-block))
  (case message
    (('grab) #t)))

(defstatehandler tfl-commentary-node :event tfl-commentary-node-event-handler :post tfl-commentary-node-post)

(defstate hidden (tfl-commentary-node)
  :virtual #t
  :enter
    (behavior ()
      (hide! self))
  :code
    (behavior ()
      (until (-> *tfl-dev-commentary* enabled?)
        (suspend))
      (go-virtual idle))
  :exit
    (behavior ()
      (show! self))
  :post ja-post)

(defstate idle (tfl-commentary-node)
  :virtual #t
  :enter
    (behavior ()
      (ja :group! tfl-commentary-node-idle-ja :num! (identity (ja-aframe 0.0 0)))
      (ja-post)
      (set-look! self 'inactive))
  :trans
    (behavior ()
      (when (can-activate? self)
        (let ((fnt (new 'stack 'font-context *font-default-matrix* 32 160 0.0 (font-color default) (font-flags shadow kerning))))
          (set-width! fnt 440)
          (set-height! fnt 80)
          (set-flags! fnt (font-flags shadow kerning large))
          (print-game-text (lookup-text! *common-text* (text-id commentary-node-press-to-listen) #f) fnt #f 128 22))
        (let ((y (new 'stack 'vector2h))
              (y-inc! (lambda ((y vector2h)) (+! (-> y y) 8) y)))
          (when (not *display-tfl-commentary-marks*)
            (add-debug-text-3d #t
                               (bucket-id debug-no-zbuf)
                               (tfl-commentary-dev->string (-> self data dev-name))
                               (-> self root trans)
                               (font-color cyan)
                               y)
            (add-debug-text-3d #t
                               (bucket-id debug-no-zbuf)
                               (-> self data description)
                               (-> self root trans)
                               (font-color orange)
                               (y-inc! y))
            (add-debug-text-3d #t
                               (bucket-id debug-no-zbuf)
                               (time->string self)
                               (-> self root trans)
                               (font-color progress-memcard)
                               (y-inc! y))))))
  :code
    (behavior ()
      (until (and (can-activate? self) (cpad-pressed? 0 circle))
        (suspend))
      (go-virtual playing)))

(defstate playing (tfl-commentary-node)
  :virtual #t
  :enter
    (behavior ()
      (set-time! (-> self play-time))
      (set! (-> self cur-frame) 0)
      (set-look! self 'active))
  :trans
    (behavior ()
      (handle-input self)
      (draw-hud self))
  :code
    (behavior ()
      ; (play-tfl-commentary (-> self data file-name) (-> *tfl-dev-commentary* vol))
      (until (time-elapsed? (-> self play-time) (-> self data length))
        (set! (-> self cur-frame) (- (current-time) (-> self play-time)))
        (when (has-cmds-at-frame? self (-> self cur-frame))
          (execute-cmds-at-frame self (-> self cur-frame)))
        (suspend))
      ;; run last cmd if available
      (when (has-cmds-at-frame? self (-> self data length))
        (execute-cmds-at-frame self (-> self data length)))
      (go-virtual idle))
  :exit
    (behavior ()
      (set! (-> self play-time) 0)
      (remove-setting! 'music-volume)
      (remove-setting! 'sfx-volume)
      (remove-setting! 'dialog-volume)))
