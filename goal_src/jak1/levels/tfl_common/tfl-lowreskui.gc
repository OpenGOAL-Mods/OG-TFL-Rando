;;-*-Lisp-*-
(in-package goal)
(defskelgroup *tfl-lowreskui-sg*
  tfl-lowreskui
  tfl-lowreskui-lod0-jg
  tfl-lowreskui-idle-ja
  ((tfl-lowreskui-lod0-mg (meters 9999999)))
  :bounds (static-spherem 0 1 0 3))

(deftype tfl-lowreskui (process-drawable)
  ((root collide-shape :override)
   (birth-time  time-frame)
   (birth-pos    vector :inline))
  (:methods
   (init-collision! (_type_) object))
  (:states
   tfl-lowreskui-idle
   tfl-lowreskui-collect))

(defmethod init-collision! ((this tfl-lowreskui))
  (let ((cshape (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((sphere (new 'process 'collide-shape-prim-sphere cshape (the uint 0))))
      (set! (-> sphere prim-core collide-as) (collide-kind enemy))
      (set! (-> sphere collide-with) (collide-kind target))
      (set! (-> sphere prim-core action) (collide-action solid))
      (set! (-> sphere prim-core offense) (collide-offense normal-attack))
      (set-vector! (-> sphere local-sphere) 0.0 (meters 0.6) 0.0 (meters 0.6))
      (set-root-prim! cshape sphere))
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (backup-collide-with-as cshape)
    (set! (-> this root) cshape)))

(defmethod init-from-entity! ((this tfl-lowreskui) (e entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this e)
  (initialize-skeleton this *tfl-lowreskui-sg* '())
  (logclear! (-> this mask) (process-mask actor-pause))
  (transform-post)
  (vector-copy! (-> this birth-pos) (-> this root trans))
  (go tfl-lowreskui-idle)
  (none))

(defstate tfl-lowreskui-idle (tfl-lowreskui)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('attack 'touch)
         (when (= (-> proc type) target)
            (go tfl-lowreskui-collect))
         #t)))
  :code
    (behavior ()
      (loop
        (let ((bob-amount (meters 0.4))
              (bob-speed 1.8)
              (rotation-per-second (degrees 80)))
            (quaternion-rotate-y! (-> self root quat) (-> self root quat) (* rotation-per-second (seconds-per-frame)))
            (set! (-> self root trans y)
                  (+ (* bob-amount (sin (* 109.22667 (the float (* (mod (- (current-time) (-> self birth-time)) 600) bob-speed)))))
                     (-> self birth-pos y))))
        (suspend)))
  :post transform-post)

(defstate  tfl-lowreskui-collect (tfl-lowreskui)
    :enter
      (behavior ()
        (clear-collide-with-as (-> self root))
        (set-time! (-> self state-time)))
    :code
      (behavior ()
        (until (time-elapsed? (-> self state-time) (seconds 2.5))
            (let ((fnt (new 'stack 'font-context *font-default-matrix* 32 160 0.0 (font-color default) (font-flags shadow kerning))))
                (set-width! fnt 448)
                (set-height! fnt 80)
                (set-scale! fnt 0.8)
                (set-flags! fnt (font-flags shadow kerning middle large))
                (print-game-text "X / 4" fnt #f 128 22))
            (let* ((lerp-timer (/ (/ (the float (- (current-time) (-> self state-time))) TICKS_PER_SECOND) 2.5))
                (bob-amount (lerp (meters 0.4) (meters 0.1) lerp-timer))
                (bob-speed 1.8)
                (rotation-per-second (lerp (degrees 80) (degrees 1200) lerp-timer))
                (fly-pos (lerp (-> self birth-pos y) (+ (-> self birth-pos y) (meters 2.0)) lerp-timer))
                (scale-lerp (lerp 1.0 0.1 lerp-timer)))
                ;; (format *stdcon* "~%~%~% lerp-timer: ~F~%" lerp-timer)
                (quaternion-rotate-y! (-> self root quat) (-> self root quat) (* rotation-per-second (seconds-per-frame)))
                (set! (-> self root trans y)
                    (+ (* bob-amount (sin (* 109.22667 (the float (* (mod (- (current-time) (-> self birth-time)) 600) bob-speed)))))
                        fly-pos))
                (set-vector! (-> self root scale) scale-lerp scale-lerp scale-lerp 1.0))
            (suspend))
        (process-entity-status! self (entity-perm-status dead) #t))
  :post transform-post)