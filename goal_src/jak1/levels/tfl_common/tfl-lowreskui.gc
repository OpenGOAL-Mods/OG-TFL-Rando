;;-*-Lisp-*-
(in-package goal)
(defglobalconstant LOWRESKUI_COUNT 4)

(deftype lowreskui-info (structure)
  ((level symbol)
   (text  text-id)
   (index int8)))

(define *lowreskui-info*
  (new 'static
       'boxed-array
       :type
       lowreskui-info
       :length
       LOWRESKUI_COUNT
       :allocated-length
       LOWRESKUI_COUNT
       (new 'static 'lowreskui-info :level 'crystal-ca :text (text-id crystalc-level) :index 0)
       (new 'static 'lowreskui-info :level 'crescent-t :text (text-id crescent-level) :index 1)
       (new 'static 'lowreskui-info :level 'energy-bay :text (text-id energy-bay-level) :index 2)
       (new 'static 'lowreskui-info :level 'open-mines :text (text-id open-mines-level) :index 3)))

(defun get-lowreskui-info-by-level ((lev symbol))
  (dotimes (i LOWRESKUI_COUNT)
    (if (= (-> *lowreskui-info* i level) lev) (return (-> *lowreskui-info* i))))
  (the lowreskui-info #f))

(defun lowreskui-collected-count ()
  (let* ((count 0)
         (task (game-task tfl-lowreskui))
         (perm (get-entity-task-perm *game-info* (game-task tfl-lowreskui)))
         (ctrl (get-task-control task)))
    ; (dotimes (i 8)
    ;   (countdown (ii 8)
    ;     (if (logtest? (get-reminder ctrl i) (ash 1 (* ii 8))) (1+! count))))
    (countdown (i 63)
      (if (logtest? (-> perm user-uint64) (ash 1 i)) (1+! count)))
    count))

(deftype hud-lowreskui (hud)
  ((x-scale    float)
   (y-scale    float)
   (x-pos      int32)
   (y-pos      int32)
   (info       lowreskui-info)
   (start-time time-frame))
  (:methods
   (init-particles! (_type_) object :replace)))

(def-actor tfl-lowreskui
  :bounds (0 1 0 3)
  :texture-level 2)

(defbehavior hud-lowreskui-init-by-other hud-lowreskui ((info lowreskui-info))
  (set! (-> self nb-of-icons) 0)
  (set! (-> self nb-of-particles) 0)
  (set! (-> self max-nb-of-particles) 7)
  (set! (-> self first-init) #t)
  (set! (-> self friend) -1)
  (set-time! (-> self last-increment-time))
  (set-time! (-> self last-target-equal-time))
  (set! (-> self increment-on-event) #f)
  (set! (-> self skip-particle) -1)
  (set! (-> self disable) #f)
  (set! (-> self force-on-screen) #f)
  (set! (-> self deactivate-when-hidden) #f)
  (set! (-> self y-offset) 0)
  (set! (-> self next-y-offset) 0)
  (set-time! (-> self last-hide-time))
  (process-mask-set! (-> self mask) menu)
  (process-mask-clear! (-> self mask) pause progress)
  (set! (-> self info) info)
  (init-particles! self)
  (draw-icons self)
  (draw-particles self)
  (go hud-hidden))

(deftype tfl-lowreskui (process-drawable)
  ((root       collide-shape :override)
   (birth-time time-frame)
   (birth-pos  vector :inline)
   (info       lowreskui-info))
  (:methods
   (init-collision! (_type_) object)
   (collected? (_type_) symbol)
   (collect! (_type_) object)
   (activate-lowreskui-hud (_type_) (pointer hud-lowreskui)))
  (:states
   tfl-lowreskui-idle
   tfl-lowreskui-collect
   tfl-lowreskui-die))

(defmethod init-collision! ((this tfl-lowreskui))
  (let ((cshape (new 'process 'collide-shape this (collide-list-enum hit-by-player))))
    (let ((sphere (new 'process 'collide-shape-prim-sphere cshape (the uint 0))))
      (set! (-> sphere prim-core collide-as) (collide-kind enemy))
      (set! (-> sphere collide-with) (collide-kind target))
      (set! (-> sphere prim-core offense) (collide-offense normal-attack))
      (set-vector! (-> sphere local-sphere) 0.0 (meters 0.6) 0.0 (meters 0.6))
      (set-root-prim! cshape sphere))
    (set! (-> cshape nav-radius) (* 0.75 (-> cshape root-prim local-sphere w)))
    (backup-collide-with-as cshape)
    (set! (-> this root) cshape)))

(defmethod init-from-entity! ((this tfl-lowreskui) (e entity-actor))
  (init-collision! this)
  (process-drawable-from-entity! this e)
  (initialize-skeleton this *tfl-lowreskui-sg* '())
  (logclear! (-> this mask) (process-mask actor-pause))
  (transform-post)
  (vector-copy! (-> this birth-pos) (-> this root trans))
  (set! (-> this info) (get-lowreskui-info-by-level (-> e extra level name)))
  ; (set-part! :proc this :id 63)
  (when (collected? this)
    (process-entity-status! this (entity-perm-status dead) #t)
    (go tfl-lowreskui-die))
  (go tfl-lowreskui-idle)
  (none))

(defmethod collected? ((this tfl-lowreskui))
  (let* ((task (game-task tfl-lowreskui))
         (perm (get-entity-task-perm *game-info* task))
         (idx (-> this info index)))
    (logtest? (-> perm user-uint64) (ash 1 idx))))

(defmethod collect! ((this tfl-lowreskui))
  (let* ((task (game-task tfl-lowreskui))
         (perm (get-entity-task-perm *game-info* task))
         (idx (-> this info index)))
    ; (format 0
    ;         "lowreskui idx ~D ash ~D perm before #b~b perm after #b~b~%"
    ;         idx
    ;         (ash 1 idx)
    ;         (-> perm user-uint64)
    ;         (logior (-> perm user-uint64) (ash 1 idx)))
    (logior! (-> perm status) (entity-perm-status user-set-from-cstage))
    (logior! (-> perm user-uint64) (ash 1 idx))))

(defmethod activate-lowreskui-hud ((this tfl-lowreskui))
  (process-spawn hud-lowreskui (-> this info) :to this))

(defstate tfl-lowreskui-idle (tfl-lowreskui)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('attack 'touch) (when (= (-> proc type) target) (go tfl-lowreskui-collect)))))
  :code
    (behavior ()
      (loop
        (let ((bob-amount (meters 0.4))
              (bob-speed 1.8)
              (rotation-per-second (degrees 80)))
          (quaternion-rotate-y! (-> self root quat) (-> self root quat) (* rotation-per-second (seconds-per-frame)))
          (set! (-> self root trans y)
                (+ (* bob-amount (sin (* 109.22667 (the float (* (mod (- (current-time) (-> self birth-time)) (seconds 2)) bob-speed)))))
                   (-> self birth-pos y))))
        (suspend)))
  :post transform-post)

(defstate tfl-lowreskui-die (tfl-lowreskui)
  :code
    (behavior ()
      (hide! self)
      (until (not (-> self child))
        (suspend))
      (remove-setting! 'allow-progress)
      (cleanup-for-death self)))

(defstate tfl-lowreskui-collect (tfl-lowreskui)
  :enter
    (behavior ()
      (clear-collide-with-as (-> self root))
      (set-time! (-> self state-time)))
  :code
    (behavior ()
      (collect! self)
      (when (= (lowreskui-collected-count) LOWRESKUI_COUNT)
        (logior! (-> *pc-settings* cheats-known) (pc-cheats super-eco-blue super-eco-red super-eco-yellow super-eco-green))
        ; (close-specific-task! (game-task tfl-lowreskui) (task-status invalid))
        )
      (activate-lowreskui-hud self)
      (set-setting! 'allow-progress #f 0.0 0)
      (until (time-elapsed? (-> self state-time) (seconds 2.5))
        ; (spawn (-> self part) (-> self root trans))
        (when (and *target* (= (-> *target* next-state name) 'target-death))
          (go tfl-lowreskui-die))
        (let* ((lerp-timer (/ (/ (the float (- (current-time) (-> self state-time))) TICKS_PER_SECOND) 2.5))
               (bob-amount (lerp (meters 0.4) (meters 0.1) lerp-timer))
               (bob-speed 1.8)
               (rotation-per-second (lerp (degrees 80) (degrees 1200) lerp-timer))
               (fly-pos (lerp (-> self birth-pos y) (+ (-> self birth-pos y) (meters 2.0)) lerp-timer))
               (scale-lerp (lerp 1.0 0.1 lerp-timer)))
          (quaternion-rotate-y! (-> self root quat) (-> self root quat) (* rotation-per-second (seconds-per-frame)))
          (set! (-> self root trans y)
                (+ (* bob-amount (sin (* 109.22667 (the float (* (mod (- (current-time) (-> self birth-time)) (seconds 2)) bob-speed)))))
                   fly-pos))
          (set-vector! (-> self root scale) scale-lerp scale-lerp scale-lerp 1.0))
        (suspend))
      (go tfl-lowreskui-die))
  :post transform-post)

(defmethod draw-hud ((this hud-lowreskui))
  (call-parent-method this)
  (let* ((y-off 13)
         (fnt (new 'stack
                   'font-context
                   *font-default-matrix*
                   (+ (* (-> this x-sgn) (-> this offset)) -60 (-> this text-x))
                   (+ (/ (* (+ (-> this text-y) (* (-> this y-sgn) (-> this offset)) (-> this y-offset))
                            (the int (-> *video-parms* relative-y-scale)))
                         2)
                      -17)
                   0.0
                   (font-color red)
                   (font-flags shadow kerning)))
         (count (lowreskui-collected-count))
         (last? (= count LOWRESKUI_COUNT)))
    (set-width! fnt 228)
    (set-height! fnt 45)
    (set-scale! fnt 0.6)
    (set-flags! fnt (font-flags shadow kerning middle middle-vert large))
    (print-game-text (lookup-text! *common-text* (-> this info text) #f) fnt #f 128 18)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf))
      (draw-string-xy-scaled (string-format (lookup-text! *common-text* (if (not last?) (text-id tfl-lowreskui-found) (text-id tfl-lowreskui-all-found)) #f))
                             buf
                             (+ (-> this text-x) (* (-> this x-sgn) (-> this offset)) 50)
                             (+ (/ (* (+ (-> this text-y) (* (-> this y-sgn) (-> this offset)) (-> this y-offset))
                                      (the int (-> *video-parms* relative-y-scale)))
                                   2)
                                y-off)
                             (font-color yellow)
                             (font-flags shadow kerning middle large)
                             (if (not last?) 1.0 0.5))))
  (none))

(defmethod init-particles! ((this hud-lowreskui))
  (when (< (-> this nb-of-icons) 6)
    (let ((i (-> this nb-of-icons)))
      (set! (-> this icons i) (new 'static 'hud-icon))
      (let ((manipy (the (pointer manipy) (manipy-spawn (static-vector 0.0 0.0 0.0 1.0) #f *tfl-lowreskui-sg* #f :to this))))
        (when manipy
          (set! (-> manipy 0 draw dma-add-func) dma-add-process-drawable-hud-merc)
          (set-vector! (-> manipy 0 root trans) 0.0 0.0 0.0 1.0)
          (set-vector! (-> manipy 0 root scale) 0.05 0.05 0.05 1.0))
        (set! (-> this icons i icon) manipy)
        (when manipy
          (process-mask-set! (-> manipy 0 mask) pause)
          (process-mask-clear! (-> manipy 0 mask) menu progress)
          (set! (-> manipy 0 root trans z) 1792.0)
          (set! (-> this icons i icon-x) 0)
          (set! (-> this icons i icon-y) 0)
          (set! (-> this icons i icon-z) 0)
          (set! (-> this icons i scale-x) 0.05)
          (set! (-> this icons i scale-y) 0.05))))
    (+! (-> this nb-of-icons) 1))
  (when (< (-> this nb-of-particles) (-> this max-nb-of-particles))
    (let ((p (-> this nb-of-particles)))
      (set! (-> this particles p) (new 'static 'hud-particle))
      (set! (-> this particles p part) (create-launch-control (-> *part-group-id-table* 965) this))
      (set! (-> this particles p init-pos x) 172.0)
      (set! (-> this particles p init-pos y) 330.0)
      (set! (-> this particles p init-pos z) 2.0)
      (set! (-> this particles p part matrix) -1))
    (+! (-> this nb-of-particles) 1))
  (set-pos-and-scale this (= (get-aspect-ratio) 'aspect16x9) (= (get-video-mode) 'pal))
  (dotimes (i (-> this nb-of-particles))
    (if (= (-> this particles i part matrix) -1) (set! (-> this particles i part matrix) (sprite-allocate-user-hvdf))))
  (set! (-> this text-x) 251)
  (set! (-> this text-y) 305)
  (set! (-> this x-sgn) 0)
  (set! (-> this y-sgn) 1)
  (hide-bottom-hud)
  (sound-play "get-all-orbs")
  (set-time! (-> this start-time)))

(defmethod draw-icons ((this hud-lowreskui))
  (dotimes (i (-> this nb-of-icons))
    (set-vector! (-> this icons i icon 0 root scale)
                 (* (-> this icons i scale-x) (-> *video-parms* relative-x-scale))
                 (* (-> this icons i scale-y) (-> *video-parms* relative-y-scale))
                 (* (-> this icons i scale-x) (-> *video-parms* relative-x-scale))
                 1.0)
    (set! (-> this icons i icon 0 root trans x)
          (the float (+ (-> this icons i icon-x) -256 (* (-> this x-sgn) (-> this offset)))))
    (set! (-> this icons i icon 0 root trans y)
          (- (+ (the float (-> this icons i icon-y))
                (* (the float (-> this y-sgn))
                   (the float (-> this offset))
                   (-> *video-parms* relative-y-scale)
                   (-> *video-parms* relative-y-scale))
                (* (the float (-> this y-offset)) (-> *video-parms* relative-x-scale-reciprical)))
             (the float (-> *video-parms* screen-sy)))))
  (none))

(defmethod hud-update ((this hud-lowreskui))
  (when *target*
    (hide-bottom-hud)
    (when (!= *master-mode* 'pause)
      (when (and (!= (-> this icons 0) 0) (-> this icons 0 icon))
        (set! (-> this icons 0 scale-x) (-> this x-scale))
        (set! (-> this icons 0 scale-y) (-> this y-scale))
        (set! (-> this icons 0 icon-x) (the int (* (the float (-> this x-pos)) (-> *video-parms* relative-x-scale))))
        (set! (-> this icons 0 icon-y) (* (-> this y-pos) (the int (-> *video-parms* relative-y-scale))))
        (let ((root (-> this icons 0 icon 0 root)))
          (quaternion-rotate-y! (-> root quat) (-> root quat) (degrees (* 180.0 (seconds-per-frame)))))))
    (let ((onscreen-time (if (= (lowreskui-collected-count) LOWRESKUI_COUNT) (seconds -5) (seconds -4))))
      (if (>= (+ (current-time) onscreen-time) (-> this start-time))
        (true! (-> this deactivate-when-hidden))
        (tally-value this (the int (current-time)) 0))))
  (none))

;; TODO positioning
(defmethod set-pos-and-scale ((this hud-lowreskui) (widescreen symbol) (pal symbol))
  (cond
    (widescreen
     (set! (-> this x-pos) 1000)
     (set! (-> this x-scale) (* 1.37 0.05))
     (set! (-> this y-scale) (* 1.37 0.05))
     (set! (-> this y-pos) (if pal -270 -271)))
    (else
     (set! (-> this x-pos) 625)
     (set! (-> this x-scale) 0.05)
     (set! (-> this y-scale) 0.05)
     (set! (-> this y-pos) -283)))
  ; (format 0 "kui x ~D ~A wide ~A pal ~A~%" (-> this x-pos) (get-aspect-ratio) widescreen pal)
  (none))
