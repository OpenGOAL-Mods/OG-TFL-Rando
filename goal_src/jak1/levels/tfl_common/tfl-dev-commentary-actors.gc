;;-*-Lisp-*-
(in-package goal)
(def-actor valley-rock
  :idle idle-ja
  :art (explode-ja idle-ja)
  :bounds (0 5 0 200))

(deftype valley-rock-commentary (process-drawable)
  ((anim-speed float))
  (:state-methods
   explode))

(defbehavior valley-rock-commentary-init-by-other valley-rock-commentary ((e entity-actor))
  (set! (-> self root) (new 'process 'trsqv))
  (set! (-> self entity) e)
  (set! (-> self anim-speed) 1.0)
  (process-drawable-from-entity! self e)
  (initialize-skeleton self *valley-rock-sg* '())
  (go-virtual explode))

(defstate explode (valley-rock-commentary)
  :virtual #t
  :event
    (event
      (case message
        (('anim-speed) (set! (-> self anim-speed) (-> (the bfloat (-> block param 0)) data)))))
  :code
    (behavior ()
      (loop
        (ja :group! valley-rock-idle-ja :num! min)
        (suspend-for (seconds 1.5))
        (ja :group! valley-rock-explode-ja :num! min)
        (sound-play "explosion" :vol 150 :position (the symbol (ear-trans)))
        (activate! *camera-smush-control* 1200.0 37 (seconds 1.3) 1.0 1.0)
        (process-spawn part-tracker
                       :init
                       part-tracker-init
                       (-> *part-group-id-table* 872)
                       -1
                       #f
                       #f
                       #f
                       (-> self root trans)
                       :to
                       *entity-pool*)
        (until (ja-done? 0)
          (ja :num! (seek! max (-> self anim-speed)))
          (suspend))
        (suspend-for (seconds 1.5))))
  :post ja-post)
