{
  // The "in-game" name of the level. Should be lower case, with dashes (GOAL symbol name)
  // the name of this file, and the folder this file is in must have the same name.
  "long_name": "valley",
  // The file name, should be upper case and 8 characters or less.
  "iso_name": "VALLEY",
  // The nickname, should be exactly 3 characters
  "nickname": "val", // 3 char name, all lowercase
  // Background mesh file.
  // Must have vertex colors. Use the blender cycles renderer, bake, diffuse, uncheck color,
  // and bake to vertex colors. For now, only the first vertex color group is used, so make sure you
  // only have 1.
  "gltf_file": "custom_assets/jak1/levels/valley/valley.glb",

  // automatically set wall vs. ground based on angle. Useful if you don't want to assign this yourself
  "automatic_wall_detection": true,
  "automatic_wall_angle": 45.0,

  // if your mesh has triangles with incorrect orientation, set this to make all collision mesh triangles double sided
  // this makes collision 2x slower and bigger, so only use if really needed
  "double_sided_collide": false,

  // available res-lump tag types:
  // integer types: int32, uint32, enum-int32, enum-uint32
  // float types: float, meters (1 meter = 4096.0 units), degrees (65536.0 = 360Â°)
  // vector types: vector (normal floats), vector4m (meters), vector3m (meters with w set to 1.0), vector-vol (normal floats with w in meters), movie-pos (meters with w in degrees)
  // special types: symbol, type, string, eco-info, cell-info, buzzer-info, water-height
  //
  // examples:
  //
  // adds a float tag 'spring-height' with value of 200 meters (1 meter = 4096.0 units):
  // "spring-height": ["meters", 200.0]
  //
  // adds a degrees tag 'rotoffset':
  // "rotoffset": ["degrees", -45.0]
  //
  // adds a movie-pos tag:
  // "movie-pos": ["movie-pos", [100.22, -25.3, 99.5, 180.0]]
  //
  // adds an enum tag 'options':
  // "options": ["enum-int32", "(fact-options large)"]
  //
  // adds a water-height tag:
  // "water-height": ["water-height", 25.0, 0.5, 2.0, "(water-flags wt08 wt03 wt01)"]
  //
  // adds an eco-info tag:
  // "eco-info": ["eco-info", "(pickup-type health)", 2]
  //
  // adds a cell-info tag:
  // "eco-info": ["cell-info", "(game-task training-gimmie)"]
  //
  // adds a buzzer-info tag:
  // "eco-info": ["buzzer-info", "(game-task training-buzzer)", 5]
  //
  // adds a 'symbol' tag (using the 'type' and 'string' lump types works the same way):
  // "symbol-list": ["symbol", "sym-1", "sym-2"]

  // The base actor id for your custom level. If you have multiple levels, this should be unique!
  "base_id": 50100,

  // All art groups you want to use in your custom level. Will add their models and corresponding textures to the FR3 file.
  // Note: You will still have to add them to your level's .gd file.
  "art_groups": [],

  // If you have any custom models in the "custom_assets/jak1/models/custom_levels" folder that you want to use in your level, add them to this list.
  // Note: Like with art groups, these should also be added to your level's .gd file.
  "custom_models": ["rolling-rock"],

  // Any textures you want to include in your custom level. This is mainly useful for things such as the zoomer HUD,
  // sky textures and cases where you want to use objects drawn with the generic renderer,
  // which also requires you to set a texture remap table and a list of tpages.
  // sky textures and cases where you want to use objects drawn with the generic renderer,
  // which also requires you to set a texture remap table and a list of tpages.
  // To get a list of all the textures, you can extract all of the game's textures
  // by setting "save_texture_pngs" to true in the decompiler config.
  // The format is ["tpage-name", "texture-name1", "texture-name2", ...].
  // If you want all textures from a tpage, you can just do ["tpage-name"].
  // The format is ["tpage-name", "texture-name1", "texture-name2", ...].
  // If you want all textures from a tpage, you can just do ["tpage-name"].
  "textures": [
    // Zoomer HUD textures
    // ["zoomerhud"],
    // Sandover sky textures
  ],

  // Which vanilla level's texture remap table to use.
  // This is needed if you want to have proper textures for objects that are drawn using generic, such as
  // dark eco pools or dying enemies. If you choose to use this,
  // the order of art groups and tpages in your level's .gd MUST match the vanilla level's for the textures to work.
  // "tex_remap": "village1",

  // Which sky to use for your custom level. This needs to be the name of a vanilla level with sky textures.
  // Your level's mood update needs to be set up to copy the sky texture (update-mood-default already handles this as an example).
  // You also need to add a specific tpage to your level .gd depending on the level you chose:
  // training:   tpage-1308.go
  // village1:   tpage-401.go
  // beach:      tpage-215.go
  // jungle:     tpage-388.go
  // misty:      tpage-520.go
  // firecanyon: tpage-1123.go
  // village2:   tpage-921.go
  // rolling:    tpage-925.go
  // sunkenb:    tpage-162.go
  // swamp:      tpage-630.go
  // ogre:       tpage-1117.go
  // village3:   tpage-1194.go
  // snow:       tpage-712.go
  // finalboss:  tpage-1418.go
  // The tpage you choose also has to be in the alpha (4th) slot in the "tpages" list below.
  // "sky": "village1",

  // Any texture pages that are added to the level's "texture-ids" array.
  // These will be logged in and linked as part of level loading.
  // There are five tpage categories, in this order:
  // - tfrag
  // - pris
  // - shrub
  // - alpha
  // - water
  // This is also (with the exception of levels that use the zoomer) the order that the tpages are listed in in the vanilla .gd files.
  // You need to also add these to your level .gd as well.
  // Sky textures use the alpha slot.
  // If this is empty and "tex_remap" and "sky" are the same level, this will be auto-filled with the tpages from the
  // corresponding level (check its .gd file for the art group/tpage order to copy over).
  "tpages": [],

  // Ambients you want to use in your custom level. Ambients can be used for various things like changing the music variation (flava),
  // adding ambient sounds, level name hints, etc.
  "ambients": [
  ],

  "actors": [
    // Enemies
    // Cells
    // Crates
    {
      "trans": [327.91, 60.58, 1719.45],
      "etype": "crate",
      "game_task": "(game-task valley-buzzer)",
      "quat" : [0.136, 0.129, -0.099, 0.977],
      "bsphere": [327.91, 60.58, 1719.45, 10],
      "lump": {
        "name": "valley-buzzer-01",
        "crate-type": "'iron",
        "eco-info": ["buzzer-info", "(game-task valley-buzzer)", 0],
        "movie-pos": ["movie-pos", [327.91, 60.58, 1719.45, 0.0]]
      }
    },
    // Money
    {
      "trans": [136.38, 138.73, 859.48],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [136.38, 138.73, 859.48, 10],
      "lump": {
        "name": "valley-money-001"
      }
    },
    {
      "trans": [132.41, 136.47, 866.63],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [132.41, 136.47, 866.63, 10],
      "lump": {
        "name": "valley-money-002"
      }
    },
    {
      "trans": [129.83, 134.78, 874.21],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [129.83, 134.78, 874.21, 10],
      "lump": {
        "name": "valley-money-003"
      }
    },
    {
      "trans": [151.66, 123.32, 996.86],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [151.66, 123.32, 996.86, 10],
      "lump": {
        "name": "valley-money-004"
      }
    },
    {
      "trans": [153.68, 123.60, 1005.83],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [153.68, 123.60, 1005.83, 10],
      "lump": {
        "name": "valley-money-005"
      }
    },
    {
      "trans": [155.81, 122.80, 1015.68],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [155.81, 122.80, 1015.68, 10],
      "lump": {
        "name": "valley-money-006"
      }
    },
    {
      "trans": [110.05, 85.06, 1132.76],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [110.05, 85.06, 1132.76, 10],
      "lump": {
        "name": "valley-money-007"
      }
    },
    {
      "trans": [106.73, 83.63, 1140.56],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [106.73, 83.63, 1140.56, 10],
      "lump": {
        "name": "valley-money-008"
      }
    },
    {
      "trans": [103.95, 82.08, 1147.54],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [103.95, 82.08, 1147.54, 10],
      "lump": {
        "name": "valley-money-009"
      }
    },
    {
      "trans": [225.67, 82.35, 1432.90],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [225.67, 82.35, 1432.90, 10],
      "lump": {
        "name": "valley-money-010"
      }
    },
    {
      "trans": [235.35, 81.74, 1438.14],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [235.35, 81.74, 1438.14, 10],
      "lump": {
        "name": "valley-money-011"
      }
    },
    {
      "trans": [244.45, 80.99, 1442.22],
      "etype": "money",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [244.45, 80.99, 1442.22, 10],
      "lump": {
        "name": "valley-money-012"
      }
    },
    // Eco
    {
      "trans": [165.31, 167.76, 781.36],
      "etype": "eco",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [165.31, 167.76, 781.36, 10],
      "lump": {
        "name": "valley-eco-01-blue",
        "eco-info": ["int32", 3, 1]
      }
    },
    {
      "trans": [148.20, 120.32, 972.65],
      "etype": "eco",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [148.20, 120.32, 972.65, 10],
      "lump": {
        "name": "valley-eco-02-blue",
        "eco-info": ["int32", 3, 1]
      }
    },
    {
      "trans": [157.31, 101.24, 1037.84],
      "etype": "eco",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [157.31, 101.24, 1037.84, 10],
      "lump": {
        "name": "valley-eco-03-blue",
        "eco-info": ["int32", 3, 1]
      }
    },
    {
      "trans": [92.70, 74.44, 1248.73],
      "etype": "eco",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [92.70, 74.44, 1248.73, 10],
      "lump": {
        "name": "valley-eco-04-blue",
        "eco-info": ["int32", 3, 1]
      }
    },
    {
      "trans": [187.59, 57.07, 1510.40],
      "etype": "eco",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [187.59, 57.07, 1510.40, 10],
      "lump": {
        "name": "valley-eco-05-blue",
        "eco-info": ["int32", 3, 1]
      }
    },
    // Movement
    // Danger
    // rolling-rock
    {
      "trans": [105.75, 186.71, 849.56],
      "etype": "rolling-rock-master",
      "game_task": 0,
      "quat" : [0.000, 0.000, -0.000, 1.000],
      "bsphere": [105.75, 186.71, 849.56, 10],
      "lump": {
        "name": "valley-rolling-rock-master-01"
      }
    }
    // Others
    // Visuals
  ]
}
