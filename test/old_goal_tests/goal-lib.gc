;-*-Scheme-*-

;; THE GOAL COMMON LIBRARY
;; before this is loaded into the compiler, GOOS needs to have loaded
;; goos-lib.gs.  The goos-lib will insert some macros into GOAL's macro space
;; required for this to work.

;; WARNING - this file should generate NO CODE!
;;  Any code which would be generated by this file is thrown out without warning!
;;  Any "common" code should go in gcommon instead.

(asm-file "goal/gc/goal-test-defs.gc")
(asm-file "goal/gc/goal-target-control.gc")
(asm-file "goal/gc/goal-compiler-control.gc")
(asm-file "goal/gc/goal-syntax.gc")
(asm-file "goal/gc/goal-test-utils.gc")
(asm-file "goal/gc/goal-externs.gc")
(asm-file "goal/gc/goal-constants.gc")
(asm-file "goal/gc/goal-macros.gc")
(asm-file "builder/gc/builder.gc")

;; Ideally this file only contains the above asm-file statements
;; but below is a good spot for temporary hacks:


;; HACKS!

;; temp hack, this gets you the wrong type, and doesn't do good typechecking on the inputs
; (defmacro &+ (v1 v2)
;   `(the pointer (+ (the integer ,v1) (the integer ,v2)))
;   )

(defmacro &+ (v1 &rest args)
  (if (null? args)
      `(the pointer ,v1)
      `(&+ (+ (the integer ,v1) (the integer ,(first args))) ,@(cdr args))
      )
  )

(defmacro &- (v1 v2)
  `(the pointer (- (the integer ,v1) (the integer ,v2)))
  )

(defmacro &+! (v1 v2)
  `(set! ,v1 (&+ ,v1 ,v2))
  )

;; macro to print a float.
(defmacro pf (flt)
  `(format #t "~f~%" ,flt)
  )

(defmacro ct ()
  ;; compiler test
  `(begin
     (build-game)
     (set! fancy-listener-print #f)
     (test)
     (set! fancy-listener-print #t)
     )
  )

(defmacro tt ()
  `(begin
     (lt)
     (asm-file "game/test.gc" :color :load)
     )
  )

(defmacro tn ()
  `(begin
     (asm-file "game/test.gc" :color)
     )
  )


(defmacro lm ()
  `(begin
     (build-game)
     (asm-file "game/engine/math/math.gc" :color :load)
     (set! fancy-listener-print #t)
     )
  )

(defmacro lg ()
  `(begin
     (dgo-load "game" global #xf #x200000)
     ))

(defmacro e ()
  `(:exit)
  )

;(test)
;; uncomment to run tests automatically on startup.  
;; Useful for running the compiler in GDB where you can't easily type stuff.
;;:(:t)
;(build-game)

; (set-config! debug-print-obj #t)